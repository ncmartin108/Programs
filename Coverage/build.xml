<!-- Sample Ant build file for running RacingScore under JaCoCo 
     Jonathan Cook, 17 Sep 2015; modified Z O. Toups, July 2020 using code from: 
     https://www.eclemma.org/jacoco/trunk/doc/examples/build/build.xml
     Some components
        Copyright (c) 2009, 2020 Mountainminds GmbH & Co. KG and Contributors
        This program and the accompanying materials are made available under
        the terms of the Eclipse Public License 2.0 which is available at
        http://www.eclipse.org/legal/epl-2.0

        SPDX-License-Identifier: EPL-2.0

        Contributors:
            Marc R. Hoffmann - initial API and implementation -->
<project name="racingscore" default="report" xmlns:jacoco="antlib:org.jacoco.ant">

	<!-- directory configuration - if things are not working, start troubleshooting from here -->
	<property name="jacoco.dir" location="lib/" />
	<property name="src.dir" location="src/" />
	<property name="build.dir" location="bin/" />
	<property name="result.dir" location="./target" />
	<property name="result.report.dir" location="${result.dir}/site/jacoco" />
	<property name="result.exec.file" location="${result.dir}/jacoco.exec" />

	<taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
		<classpath path="${jacoco.dir}/jacocoant.jar" />
	</taskdef>

	<!-- standard compile task, but turn debugging on for source viewing -->
	<target name="compile" description="compile the source">
		<mkdir dir="${build.dir}" />
		<javac srcdir="${src.dir}" destdir="${build.dir}" includeantruntime="false" debug="true" />
	</target>

	<!-- tests if new jacoco run is needed by checking if the jacoco.exec file is
        newer than the class files or this build file -->
	<target name="checkRun">
		<uptodate property="run.notneeded" targetfile="${result.exec.file}">
			<srcfiles dir="${src.dir}" includes="**/*.java build.xml" />
		</uptodate>
	</target>

	<!-- official test example, merged with our code -->
	<target name="test" depends="compile,checkRun" unless="run.notneeded">
		<echo>run needed...</echo>
		<!--
	 Step 2: Wrap test execution with the JaCoCo coverage task 
	 this example has two runs, you'll need to perhaps
        modify them, and then add more; this only runs if needed-->
		
		<!-- RacingScore1 Tests -->
		
		<echo message="TEST1 RacingScore1 Input: 8 9 6 --- Output Expected: 17" />
		<jacoco:coverage destfile="${result.exec.file}">
			<java classname="edu.nmsu.cs.scoring.RacingScore1" fork="true">
				<classpath path="${build.dir}" />
				<arg value="8" />
				<arg value="9" />
				<arg value="6" />
			</java>
		</jacoco:coverage>
		
		<echo message="TEST2 RacingScore1 Input: 15 20 --- Output Expected: Error" />
		<jacoco:coverage destfile="${result.exec.file}">
			<java classname="edu.nmsu.cs.scoring.RacingScore1" fork="true">
				<classpath path="${build.dir}" />
				<arg value="15" />
				<arg value="20" />
			</java>
		</jacoco:coverage>
		
		<echo message="TEST3 RacingScore1 Input: 21 20 22 --- Output Expected: 43" />
		<jacoco:coverage destfile="${result.exec.file}">
			<java classname="edu.nmsu.cs.scoring.RacingScore1" fork="true">
				<classpath path="${build.dir}" />
				<arg value="21" />
				<arg value="20" />
				<arg value="22" />
			</java>
		</jacoco:coverage>
		
		<echo message="TEST4 RacingScore1 Input: twenty 15 14 --- Output Expected: Error" />
		<jacoco:coverage destfile="${result.exec.file}">
			<java classname="edu.nmsu.cs.scoring.RacingScore1" fork="true">
				<classpath path="${build.dir}" />
				<arg value="twenty" />
				<arg value="15" />
				<arg value="14" />
			</java>
		</jacoco:coverage>

		<echo message="TEST5 RacingScore1 Input: 49 49 47 --- Output Expected: 98" />
		<jacoco:coverage destfile="${result.exec.file}">
			<java classname="edu.nmsu.cs.scoring.RacingScore1" fork="true">
				<classpath path="${build.dir}" />
				<arg value="49" />
				<arg value="49" />
				<arg value="47" />
			</java>
		</jacoco:coverage>
		
		<echo message="TEST6 RacingScore1 Input: 47 49 47 --- Output Expected: 96" />
		<jacoco:coverage destfile="${result.exec.file}">
			<java classname="edu.nmsu.cs.scoring.RacingScore1" fork="true">
				<classpath path="${build.dir}" />
				<arg value="47" />
				<arg value="49" />
				<arg value="47" />
			</java>
		</jacoco:coverage>
		
		<!-- RacingScore2 Tests -->
		
		<echo message="TEST1 RacingScore2 Input: 20 15 --- Output Expected: Error" />
		<jacoco:coverage destfile="${result.exec.file}">
			<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
				<classpath path="${build.dir}" />
				<arg value="20" />
				<arg value="15" />
			</java>
		</jacoco:coverage>
		
		<echo message="TEST2 RacingScore2 Input: two 15 16 --- Output Expected: Error" />
		<jacoco:coverage destfile="${result.exec.file}">
			<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
				<classpath path="${build.dir}" />
				<arg value="two" />
				<arg value="15" />
				<arg value="16" />
			</java>
		</jacoco:coverage>
		
		<echo message="TEST3 RacingScore2 Input: --- Output Expected: Error" />
		<jacoco:coverage destfile="${result.exec.file}">
			<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
				<classpath path="${build.dir}" />
			</java>
		</jacoco:coverage>
		
		<echo message="TEST4 RacingScore2 Input: -2 16 16 --- Output Expected: Error" />
		<jacoco:coverage destfile="${result.exec.file}">
			<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
				<classpath path="${build.dir}" />
				<arg value="-2" />
				<arg value="16" />
				<arg value="16" />
			</java>
		</jacoco:coverage>
		
		<echo message="TEST5 RacingScore2 Input: 16 -16 18 --- Output Expected: Error" />
		<jacoco:coverage destfile="${result.exec.file}">
			<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
				<classpath path="${build.dir}" />
				<arg value="16" />
				<arg value="-16" />
				<arg value="18" />
			</java>
		</jacoco:coverage>
		
		<echo message="TEST6 RacingScore2 Input: 2 3 -2 --- Output Expected: Error" />
		<jacoco:coverage destfile="${result.exec.file}">
			<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
				<classpath path="${build.dir}" />
				<arg value="2" />
				<arg value="3" />
				<arg value="-2" />
			</java>
		</jacoco:coverage>
		
		<echo message="TEST7 RacingScore2 Input: 1 3 60 --- Output Expected: Error" />
		<jacoco:coverage destfile="${result.exec.file}">
			<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
				<classpath path="${build.dir}" />
				<arg value="1" />
				<arg value="3" />
				<arg value="60" />
			</java>
		</jacoco:coverage>
		
		<echo message="TEST8 RacingScore2 Input: 4 59 6 --- Output Expected: Error" />
		<jacoco:coverage destfile="${result.exec.file}">
			<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
				<classpath path="${build.dir}" />
				<arg value="4" />
				<arg value="59" />
				<arg value="6" />
			</java>
		</jacoco:coverage>
		
		<echo message="TEST9 RacingScore2 Input: 51 50 49 --- Output Expected: Error" />
		<jacoco:coverage destfile="${result.exec.file}">
			<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
				<classpath path="${build.dir}" />
				<arg value="51" />
				<arg value="50" />
				<arg value="49" />
			</java>
		</jacoco:coverage>
		
		<echo message="TEST10 RacingScore2 Input: 8 9 6 --- Output Expected: 17" />
		<jacoco:coverage destfile="${result.exec.file}">
			<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
				<classpath path="${build.dir}" />
				<arg value="8" />
				<arg value="9" />
				<arg value="6" />
			</java>
		</jacoco:coverage>
		
		<echo message="TEST11 RacingScore2 Input: 9 8 6 --- Output Expected: 17" />
		<jacoco:coverage destfile="${result.exec.file}">
			<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
				<classpath path="${build.dir}" />
				<arg value="9" />
				<arg value="8" />
				<arg value="6" />
			</java>
		</jacoco:coverage>
		
		<echo message="TEST12 RacingScore2 Input: 6 8 9 --- Output Expected: 17" />
		<jacoco:coverage destfile="${result.exec.file}">
			<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
				<classpath path="${build.dir}" />
				<arg value="6" />
				<arg value="8" />
				<arg value="9" />
			</java>
		</jacoco:coverage>
		
		<echo message="TEST13 RacingScore2 Input: 6 9 8 --- Output Expected: 17" />
		<jacoco:coverage destfile="${result.exec.file}">
			<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
				<classpath path="${build.dir}" />
				<arg value="6" />
				<arg value="9" />
				<arg value="8" />
			</java>
		</jacoco:coverage>
		
		<echo message="TEST14 RacingScore2 Input: 9 6 8 --- Output Expected: 17" />
		<jacoco:coverage destfile="${result.exec.file}">
			<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
				<classpath path="${build.dir}" />
				<arg value="9" />
				<arg value="6" />
				<arg value="8" />
			</java>
		</jacoco:coverage>
		
		<echo message="TEST15 RacingScore2 Input: 8 6 9 --- Output Expected: 17" />
		<jacoco:coverage destfile="${result.exec.file}">
			<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
				<classpath path="${build.dir}" />
				<arg value="8" />
				<arg value="6" />
				<arg value="9" />
			</java>
		</jacoco:coverage>
		
		<echo message="TEST16 RacingScore2 Input: 7 7 6 --- Output Expected: 14" />
		<jacoco:coverage destfile="${result.exec.file}">
			<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
				<classpath path="${build.dir}" />
				<arg value="7" />
				<arg value="7" />
				<arg value="6" />
			</java>
		</jacoco:coverage>
		
		<echo message="TEST17 RacingScore2 Input: 7 6 7 --- Output Expected: 14" />
		<jacoco:coverage destfile="${result.exec.file}">
			<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
				<classpath path="${build.dir}" />
				<arg value="7" />
				<arg value="6" />
				<arg value="7" />
			</java>
		</jacoco:coverage>
		
		<echo message="TEST18 RacingScore2 Input: 6 7 7 --- Output Expected: 14" />
		<jacoco:coverage destfile="${result.exec.file}">
			<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
				<classpath path="${build.dir}" />
				<arg value="6" />
				<arg value="7" />
				<arg value="7" />
			</java>
		</jacoco:coverage>
		
		<echo message="TEST19 RacingScore2 Input: 7 6 6 --- Output Expected: 13" />
		<jacoco:coverage destfile="${result.exec.file}">
			<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
				<classpath path="${build.dir}" />
				<arg value="7" />
				<arg value="6" />
				<arg value="6" />
			</java>
		</jacoco:coverage>
		
		<echo message="TEST20 RacingScore2 Input: 6 6 7 --- Output Expected: 13" />
		<jacoco:coverage destfile="${result.exec.file}">
			<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
				<classpath path="${build.dir}" />
				<arg value="6" />
				<arg value="6" />
				<arg value="7" />
			</java>
		</jacoco:coverage>
		
		<echo message="TEST21 RacingScore2 Input: 6 7 6 --- Output Expected: 13" />
		<jacoco:coverage destfile="${result.exec.file}">
			<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
				<classpath path="${build.dir}" />
				<arg value="6" />
				<arg value="7" />
				<arg value="6" />
			</java>
		</jacoco:coverage>
		
		<echo message="TEST22 RacingScore2 Input: 50 50 50 --- Output Expected: 100" />
		<jacoco:coverage destfile="${result.exec.file}">
			<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
				<classpath path="${build.dir}" />
				<arg value="50" />
				<arg value="50" />
				<arg value="50" />
			</java>
		</jacoco:coverage>
		
	</target>
		
		
	<target name="report" depends="test,checkReport" unless="report.notneeded">
		<echo>report needed...</echo>
		<!--  Step 3: Create coverage report  -->
		<jacoco:report>
			<!--
	 This task needs the collected execution data and ... 
	-->
			<executiondata>
				<file file="${result.exec.file}" />
			</executiondata>
			<!--  the class files and optional source files ...  -->
			<structure name="JaCoCo Ant Example">
				<classfiles>
					<fileset dir="${build.dir}" />
				</classfiles>
				<sourcefiles encoding="UTF-8">
					<fileset dir="${src.dir}" />
				</sourcefiles>
			</structure>
			<!--  to produce reports in different formats.  -->
			<html destdir="${result.report.dir}" />
			<csv destfile="${result.report.dir}/report.csv" />
			<xml destfile="${result.report.dir}/report.xml" />
		</jacoco:report>	
	</target>

	<!-- tests if new jacoco report needs generated by checking if top report file
        (index.html) is newer than the run data file (jacoco.exec) -->
	<target name="checkReport">
		<uptodate property="report.notneeded" targetfile="${result.report.dir}/index.html" srcfile="${result.exec.file}" />
	</target>

	<!-- clean up by removing all generated files; do "ant clean" to start afresh -->
	<target name="clean">
		<delete>
			<fileset dir="." includes="**/*.class **/jacoco.exec" />
		</delete>
		<delete dir="${result.report.dir}" />
	</target>

</project>

